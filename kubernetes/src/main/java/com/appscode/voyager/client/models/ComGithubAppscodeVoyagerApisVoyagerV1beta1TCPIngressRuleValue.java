/*
 * voyager-server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * Contact: hello@appscode.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.appscode.voyager.client.models;

import java.util.Objects;
import com.appscode.voyager.client.models.ComGithubAppscodeVoyagerApisVoyagerV1beta1IngressBackend;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue
 */

public class ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue {
  @SerializedName("address")
  private String address = null;

  @SerializedName("alpn")
  private List<String> alpn = null;

  @SerializedName("backend")
  private ComGithubAppscodeVoyagerApisVoyagerV1beta1IngressBackend backend = null;

  @SerializedName("noTLS")
  private Boolean noTLS = null;

  @SerializedName("nodePort")
  private String nodePort = null;

  @SerializedName("port")
  private String port = null;

  public ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue address(String address) {
    this.address = address;
    return this;
  }

   /**
   * The network address to listen TCP connections on.
   * @return address
  **/
  @ApiModelProperty(value = "The network address to listen TCP connections on.")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue alpn(List<String> alpn) {
    this.alpn = alpn;
    return this;
  }

  public ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue addAlpnItem(String alpnItem) {
    if (this.alpn == null) {
      this.alpn = new ArrayList<String>();
    }
    this.alpn.add(alpnItem);
    return this;
  }

   /**
   * Application-Layer Protocol Negotiation (ALPN) is a Transport Layer Security (TLS) extension for application layer protocol negotiation. ALPN allows the application layer to negotiate which protocol should be performed over a secure connection in a manner which avoids additional round trips and which is independent of the application layer protocols. It is used by HTTP/2. If provided a list of alpn will be added to port as alpn option1,option2,... If SecretName is Provided this secret will be used to terminate SSL with alpn options. If Secret name is not provided backend server is responsible for handling SSL.
   * @return alpn
  **/
  @ApiModelProperty(value = "Application-Layer Protocol Negotiation (ALPN) is a Transport Layer Security (TLS) extension for application layer protocol negotiation. ALPN allows the application layer to negotiate which protocol should be performed over a secure connection in a manner which avoids additional round trips and which is independent of the application layer protocols. It is used by HTTP/2. If provided a list of alpn will be added to port as alpn option1,option2,... If SecretName is Provided this secret will be used to terminate SSL with alpn options. If Secret name is not provided backend server is responsible for handling SSL.")
  public List<String> getAlpn() {
    return alpn;
  }

  public void setAlpn(List<String> alpn) {
    this.alpn = alpn;
  }

  public ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue backend(ComGithubAppscodeVoyagerApisVoyagerV1beta1IngressBackend backend) {
    this.backend = backend;
    return this;
  }

   /**
   * Backend to forward the requests.
   * @return backend
  **/
  @ApiModelProperty(value = "Backend to forward the requests.")
  public ComGithubAppscodeVoyagerApisVoyagerV1beta1IngressBackend getBackend() {
    return backend;
  }

  public void setBackend(ComGithubAppscodeVoyagerApisVoyagerV1beta1IngressBackend backend) {
    this.backend = backend;
  }

  public ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue noTLS(Boolean noTLS) {
    this.noTLS = noTLS;
    return this;
  }

   /**
   * Set noTLS &#x3D; true to force plain text. Else, auto detect like present
   * @return noTLS
  **/
  @ApiModelProperty(value = "Set noTLS = true to force plain text. Else, auto detect like present")
  public Boolean isNoTLS() {
    return noTLS;
  }

  public void setNoTLS(Boolean noTLS) {
    this.noTLS = noTLS;
  }

  public ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue nodePort(String nodePort) {
    this.nodePort = nodePort;
    return this;
  }

   /**
   * Specifies the node port of the referenced service.
   * @return nodePort
  **/
  @ApiModelProperty(value = "Specifies the node port of the referenced service.")
  public String getNodePort() {
    return nodePort;
  }

  public void setNodePort(String nodePort) {
    this.nodePort = nodePort;
  }

  public ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue port(String port) {
    this.port = port;
    return this;
  }

   /**
   * port to listen tcp connections.
   * @return port
  **/
  @ApiModelProperty(value = "port to listen tcp connections.")
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue comGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue = (ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue) o;
    return Objects.equals(this.address, comGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue.address) &&
        Objects.equals(this.alpn, comGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue.alpn) &&
        Objects.equals(this.backend, comGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue.backend) &&
        Objects.equals(this.noTLS, comGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue.noTLS) &&
        Objects.equals(this.nodePort, comGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue.nodePort) &&
        Objects.equals(this.port, comGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue.port);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, alpn, backend, noTLS, nodePort, port);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubAppscodeVoyagerApisVoyagerV1beta1TCPIngressRuleValue {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    alpn: ").append(toIndentedString(alpn)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    noTLS: ").append(toIndentedString(noTLS)).append("\n");
    sb.append("    nodePort: ").append(toIndentedString(nodePort)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

